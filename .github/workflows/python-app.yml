# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install flask_restful
        pip install pandas
        pip install flask_cors
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        export PYTHONPATH=src
        pytest
        
  container:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    
    steps:    
    - uses: actions/checkout@v3
    
    - name: Docker login 
      uses​: ​docker/login-action@v1 
      with​: 
​        ​registry​: ​ghcr.io 
​        ​username​: ​${{ secrets.GHCR_USERNAME }} 
​        ​password​: ​${{ secrets.GHCR_TOKEN }}
      #run: echo "$CR_PAT" | docker login ghcr.io -u "$ghcr_user" --password-stdin
      ​
   
    - name: Build the Docker image
      run: docker build . -t ghcr.io/CatIsOutOfTheBag/my-app:latest
   
    - name: Push the Docker container
      run: docker push ghcr.io/CatIsOutOfTheBag/my-app:latest
    
    
    #- name: Build the Docker image
      #run: docker build . --file Dockerfile --tag my-app-dotnet:$(date +%s)
     # run: docker build . --file Dockerfile --tag my-app-dotnet
    #- name: Push the Docker container
    #  run: |
    #    docker login
    #    docker push my-app-dotnet
      




    
